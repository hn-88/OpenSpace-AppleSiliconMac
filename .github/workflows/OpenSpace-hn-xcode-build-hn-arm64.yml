name: Openspace-hn-xcode-build-hn-arm64

on: workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # This yml is copied from https://github.com/hn-88/OpenSpace-AppImage/blob/main/.github/workflows/appimage-creation.yml
  # and modified.
  BUILD_TYPE: Release
  OPENSPACE_VERSION: "0.21.0post-rc1"
  THIS_REPO_PATH: "/Users/runner/work/OpenSpace-AppleSiliconMac/OpenSpace-AppleSiliconMac" 
  
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md
    runs-on: macos-14

    steps:
    - uses: actions/checkout@v4
    
    - name: get openspace code for a particular release
      # https://docs.openspaceproject.com/releases-v0.20/contribute/development/compiling/macos.html
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        git clone --recursive https://github.com/hn-88/OpenSpace.git "$openSpaceHome"
        cd "$openSpaceHome"
        # use the main branch instead # git checkout "releases/v${OPENSPACE_VERSION}" --recurse-submodules
        git checkout ToCompileOnMacOS --recurse-submodules
        mkdir build
        cd build

    - name: Update Homebrew and Install GLM
      run: |
        brew update
        brew install glm

    - name: get patched Ghoul
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/ext"
        rm -rf ghoul
        git clone https://github.com/hn-88/Ghoul.git --branch MacOSfixes --recursive

    - name: Download patched engine.cpp from GitHub
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/apps/OpenSpace/ext/sgct/src"
        curl -L -o engine.cpp https://raw.githubusercontent.com/hn-88/sgct/patch-1/src/engine.cpp


    - name: patch touchbar
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        # cp -v src-interaction-touchbar.mm "$openSpaceHome/src/interaction/touchbar.mm"

    - name: patch verifier.inl and other files
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        # cp -v include-openspace-documentation-verifier.inl "$openSpaceHome/include/openspace/documentation/verifier.inl"
        # cp -v modules-webgui-webguimodule.cpp "$openSpaceHome/modules/webgui/webguimodule.cpp"
        # cp -v modules-webbrowser-webbrowsermodule.cpp "$openSpaceHome/modules/webbrowser/webbrowsermodule.cpp"
        # cp -v ext-json-CMakeLists.txt "$openSpaceHome/ext/json/CMakeLists.txt"
        # cp -v src-documentation-verifier.cpp "$openSpaceHome/src/documentation/verifier.cpp"
        # cp -v modules-webbrowser-src-cefhost.cpp "$openSpaceHome/modules/webbrowser/src/cefhost.cpp"
        # cp -v include-openspace-util-json_helper.inl "$openSpaceHome/include/openspace/util/json_helper.inl"
    
            
    - name: Install dependencies
      # https://docs.openspaceproject.com/releases-v0.20/contribute/development/compiling/ubuntu.html
      run: |
        brew install glew boost freeimage mpv vulkan-headers vulkan-loader brotli gdal qt@6 dylibbundler

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"
        # https://stackoverflow.com/questions/16700415/cmake-generate-xcode-project-from-existing-sources
        # CMAKE_PREFIX_PATH to /opt/homebrew - https://stackoverflow.com/questions/68105648/configure-cmake-to-work-with-homebrew-libraries-instead-system-provided-librarie
        cmake -G Xcode -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DCMAKE_CXX_STANDARD=20 -DONLY_ACTIVE_ARCH=YES -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.3 -DCMAKE_CXX_FLAGS="-Wno-error -D_FILE_OFFSET_BITS=64" -DCMAKE_C_FLAGS="-Wno-error -Wno-dev -D_FILE_OFFSET_BITS=64" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_PREFIX_PATH=/opt/homebrew -DBUILD_TESTS=OFF -DCOMPILE_WARNING_AS_ERROR=OFF -DOPENSPACE_HAVE_TESTS=OFF -DSGCT_BUILD_TESTS=OFF "$openSpaceHome"       

    - name: Build
      # Build your program with the given configuration
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"
        # echo "Check to see if we have enough disk space ... " only 8 GB used out of 120+ GB
        # df -h
        cmake --build . --config ${{env.BUILD_TYPE}} -- -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.3
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: OpenSpace-MacOS14-AppleSilicon-before-bundling
        # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: /Users/runner/source/OpenSpace/bin/Release/*.app

    - name: Ensure Frameworks directories exist
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome"
        mkdir -p bin/Release/OpenSpace.app/Contents/Frameworks
        mkdir -p bin/Release/OpenSpace.app/Contents/Frameworks/OpenSpace_Helper.app/Contents/Frameworks

    - name: Recursively bundle dylibs for main and helper apps
      shell: bash
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome"
        bundle_dylibs_recursive() {
          local BINARY="$1"
          local TARGET_FRAMEWORKS_DIR="$2"
          local SEEN_LIST="/tmp/seen_$(basename "$BINARY")_$$.txt"
        
          mkdir -p "$TARGET_FRAMEWORKS_DIR"
          touch "$SEEN_LIST"
        
          echo "üîç Processing: $BINARY"
          echo "üìÅ Target Frameworks Dir: $TARGET_FRAMEWORKS_DIR"
        
          # Resolve @rpath, @loader_path, or return absolute paths
          resolve_real_path() {
            local dep="$1"
            local binary="$2"
        
            if [[ "$dep" == @rpath/* ]]; then
              # Use otool -l to extract all rpaths from the binary
              otool -l "$binary" | awk '
                $1 == "cmd" && $2 == "LC_RPATH" {getline; getline; print $2}
              ' | while read -r rpath; do
                local full="$rpath/${dep#@rpath/}"
                if [[ -f "$full" ]]; then
                  echo "$full"
                  return
                fi
              done
            elif [[ "$dep" == @loader_path/* ]]; then
              local loader_dir
              loader_dir=$(dirname "$binary")
              local full="$loader_dir/${dep#@loader_path/}"
              if [[ -f "$full" ]]; then
                echo "$full"
                return
              fi
            elif [[ -f "$dep" ]]; then
              echo "$dep"
              return
            fi
        
            return 1
          }
        
          process_binary() {
            local bin="$1"
        
            otool -L "$bin" | tail -n +2 | awk '{print $1}' | while read -r dep; do
              # Skip system libraries
              if [[ "$dep" == /usr/lib/* || "$dep" == /System/* ]]; then
                continue
              fi
        
              local dep_base=$(basename "$dep")
        
              # Skip already seen
              if grep -qx "$dep_base" "$SEEN_LIST"; then
                continue
              fi
              echo "$dep_base" >> "$SEEN_LIST"
        
              local real_path
              real_path=$(resolve_real_path "$dep" "$bin")
              if [[ -z "$real_path" ]]; then
                echo "‚ö†Ô∏è Could not resolve $dep"
                continue
              fi
        
              echo "‚úÖ Found $dep_base at $real_path"
        
              # Copy to app bundle
              if [[ ! -f "$TARGET_FRAMEWORKS_DIR/$dep_base" ]]; then
                cp -v "$real_path" "$TARGET_FRAMEWORKS_DIR"
              fi
        
              # Update binary to use @executable_path-relative path
              echo "Running install_name_tool on $bin for $dep..."
              install_name_tool -change "$dep" "@executable_path/../Frameworks/$dep_base" "$bin" || echo "‚ùå install_name_tool failed for $dep"
        
              # Recurse into the copied dylib
              if [[ "$real_path" != "$bin" ]]; then
                process_binary "$TARGET_FRAMEWORKS_DIR/$dep_base"
              fi
            done
          }
        
          process_binary "$BINARY"
        
          rm -f "$SEEN_LIST"
        }

        # Paths
        MAIN_APP="bin/Release/OpenSpace.app/Contents/MacOS/OpenSpace"
        MAIN_FW="bin/Release/OpenSpace.app/Contents/Frameworks"

        HELPER_APP="bin/Release/OpenSpace.app/Contents/Frameworks/OpenSpace_Helper.app/Contents/MacOS/OpenSpace_Helper"
        HELPER_FW="bin/Release/OpenSpace.app/Contents/Frameworks/OpenSpace_Helper.app/Contents/Frameworks"

        # Run recursive bundling for both
        echo "Running bundle_dylibs_recursive for $MAIN_APP with fw $MAIN_FW" 
        bundle_dylibs_recursive "$MAIN_APP" "$MAIN_FW"
        echo "Running bundle_dylibs_recursive for $HELPER_APP with fw $HELPER_FW"
        bundle_dylibs_recursive "$HELPER_APP" "$HELPER_FW"

    - name: Get OpenSpace Windows minimal
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome"
        curl -O https://data.openspaceproject.com/release/0.21.0/OpenSpace-0.21.0_minimal.zip
        mkdir -p ./bin/Release/OpenSpace
        mv OpenSpace-0.21.0_minimal.zip ./bin/Release/OpenSpace
        cd bin/Release/OpenSpace
        unzip OpenSpace-0.21.0_minimal.zip
        # replace the Windows binaries with the Mac app
        rm OpenSpace-0.21.0_minimal.zip
        rm vc_redist.x64.exe
        rm -Rf bin
        mkdir bin
        mv -v ../OpenSpace.app bin/OpenSpace.app
        
    - name: Create .pkg installer for OpenSpace
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome"
        set -e
        # 1. Create staging directories
        mkdir -p build/pkg-root
        mkdir -p build/scripts
        
        # 2. Copy the compiled OpenSpace directory to the pkg root
        cp -a bin/Release/OpenSpace build/pkg-root/
        
        # 3. Create the postinstall script to create the shortcut
        cat << 'EOF' > build/scripts/postinstall
        #!/bin/bash
        TARGET="$HOME/OpenSpace"
        LINK="/Applications/OpenSpace"
        
        # Remove existing link if any
        if [ -L "$LINK" ]; then
          rm -f "$LINK"
        fi
        
        # Create symlink to OpenSpace.app
        if [ -d "$TARGET/bin/OpenSpace.app" ]; then
          ln -sfn "$TARGET/bin/OpenSpace.app" "$LINK"
        fi
        
        exit 0
        EOF
        
        chmod +x build/scripts/postinstall
        
        # 4. Create component package with pkgbuild
        pkgbuild \
          --root build/pkg-root \
          --install-location "$HOME" \
          --identifier org.openspace.openspace \
          --scripts build/scripts \
          --version 0.1 \
          build/OpenSpace.pkg
        
        # 5. Optional: move the final .pkg somewhere for upload
        mv build/OpenSpace.pkg bin/Release/OpenSpace.pkg

    - name: Upload pkg Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: OpenSpace-MacOS14-AppleSilicon-pkg
        # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: /Users/runner/source/OpenSpace/bin/Release/OpenSpace.pkg
